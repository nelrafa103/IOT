
tar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b0  080044b0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044b4  080044b4  000054b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080044b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  20000010  080044c8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004980  080044c8  00006980  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d879  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241c  00000000  00000000  000138b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00015cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00016868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023bf  00000000  00000000  00017128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4de  00000000  00000000  000194e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c9d  00000000  00000000  000269c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e84  00000000  00000000  0011b6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004420 	.word	0x08004420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004420 	.word	0x08004420

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 f9b4 	bl	80008a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f865 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f001 f939 	bl	80017b4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  // Configuración de los pines para LEDs y botón
   __HAL_RCC_GPIOB_CLK_ENABLE();  // Habilita el reloj para los GPIO
 8000542:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <main+0xb0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <main+0xb0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <main+0xb0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

   // Configura los LEDs como salida
   GPIO_InitStruct.Pin = LED_PIN1 | LED_PIN2;
 8000568:	2303      	movs	r3, #3
 800056a:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4619      	mov	r1, r3
 800057c:	4819      	ldr	r0, [pc, #100]	@ (80005e4 <main+0xb4>)
 800057e:	f000 fad3 	bl	8000b28 <HAL_GPIO_Init>

   // Configura el botón de usuario como entrada
   GPIO_InitStruct.Pin = BUTTON_PIN;
 8000582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000586:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <main+0xb8>)
 8000596:	f000 fac7 	bl	8000b28 <HAL_GPIO_Init>



  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059a:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <main+0xbc>)
 800059c:	2100      	movs	r1, #0
 800059e:	4814      	ldr	r0, [pc, #80]	@ (80005f0 <main+0xc0>)
 80005a0:	f001 f972 	bl	8001888 <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <main+0xc4>)
 80005a8:	6013      	str	r3, [r2, #0]

  xTaskCreate(LED_Task, "LED Task", 128, NULL, 1, NULL);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	4910      	ldr	r1, [pc, #64]	@ (80005f8 <main+0xc8>)
 80005b8:	4810      	ldr	r0, [pc, #64]	@ (80005fc <main+0xcc>)
 80005ba:	f002 f8a1 	bl	8002700 <xTaskCreate>
  xTaskCreate(Button_Task, "Button Task", 128, NULL, 1, NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <main+0xd0>)
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0xd4>)
 80005ce:	f002 f897 	bl	8002700 <xTaskCreate>
  vTaskStartScheduler();
 80005d2:	f002 fa15 	bl	8002a00 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f001 f921 	bl	800181c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0xaa>
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	08004474 	.word	0x08004474
 80005f0:	080006c1 	.word	0x080006c1
 80005f4:	20000030 	.word	0x20000030
 80005f8:	08004444 	.word	0x08004444
 80005fc:	080006dd 	.word	0x080006dd
 8000600:	08004450 	.word	0x08004450
 8000604:	08000739 	.word	0x08000739

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fec8 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xb0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xb0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xb0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <SystemClock_Config+0xb4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <SystemClock_Config+0xb4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <SystemClock_Config+0xb4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc35 	bl	8000ee4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000680:	f000 f826 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fece 	bl	8001440 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006aa:	f000 f811 	bl	80006d0 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f001 f983 	bl	80019d4 <osDelay>
 80006ce:	e7fb      	b.n	80006c8 <StartDefaultTask+0x8>

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <Error_Handler+0x8>

080006dc <LED_Task>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void LED_Task(void *pvParameters) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    while (1) {
        if (!sequencePaused) {
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <LED_Task+0x54>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d11b      	bne.n	8000726 <LED_Task+0x4a>
            // Secuencia de encendido y apagado de los LEDs
            HAL_GPIO_WritePin(GPIOB, LED_PIN1, GPIO_PIN_SET);  // Encender LED 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	4810      	ldr	r0, [pc, #64]	@ (8000734 <LED_Task+0x58>)
 80006f4:	f000 fbdc 	bl	8000eb0 <HAL_GPIO_WritePin>
            vTaskDelay(500 / portTICK_PERIOD_MS);              // Esperar 500 ms
 80006f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006fc:	f002 f948 	bl	8002990 <vTaskDelay>
            HAL_GPIO_WritePin(GPIOB, LED_PIN1, GPIO_PIN_RESET);  // Apagar LED 1
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <LED_Task+0x58>)
 8000706:	f000 fbd3 	bl	8000eb0 <HAL_GPIO_WritePin>

            HAL_GPIO_WritePin(GPIOB, LED_PIN2, GPIO_PIN_SET);  // Encender LED 2
 800070a:	2201      	movs	r2, #1
 800070c:	2102      	movs	r1, #2
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <LED_Task+0x58>)
 8000710:	f000 fbce 	bl	8000eb0 <HAL_GPIO_WritePin>
            vTaskDelay(500 / portTICK_PERIOD_MS);              // Esperar 500 ms
 8000714:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000718:	f002 f93a 	bl	8002990 <vTaskDelay>
            HAL_GPIO_WritePin(GPIOB, LED_PIN2, GPIO_PIN_RESET);  // Apagar LED 2
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <LED_Task+0x58>)
 8000722:	f000 fbc5 	bl	8000eb0 <HAL_GPIO_WritePin>
        }
        vTaskDelay(100 / portTICK_PERIOD_MS);  // Pequeño retardo antes de volver a verificar
 8000726:	2064      	movs	r0, #100	@ 0x64
 8000728:	f002 f932 	bl	8002990 <vTaskDelay>
        if (!sequencePaused) {
 800072c:	e7da      	b.n	80006e4 <LED_Task+0x8>
 800072e:	bf00      	nop
 8000730:	2000002c 	.word	0x2000002c
 8000734:	40020400 	.word	0x40020400

08000738 <Button_Task>:
    }
}

// Tarea encargada de monitorear el botón
void Button_Task(void *pvParameters) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    uint8_t buttonState = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	73bb      	strb	r3, [r7, #14]
    uint8_t lastButtonState = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]

    while (1) {
        buttonState = HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 8000748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <Button_Task+0x4c>)
 800074e:	f000 fb97 	bl	8000e80 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	73bb      	strb	r3, [r7, #14]

        // Si se detecta un cambio de estado en el botón
        if (buttonState == GPIO_PIN_SET && lastButtonState == GPIO_PIN_RESET) {
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10d      	bne.n	8000778 <Button_Task+0x40>
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10a      	bne.n	8000778 <Button_Task+0x40>
            sequencePaused = !sequencePaused;  // Cambia el estado de pausa
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <Button_Task+0x50>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <Button_Task+0x50>)
 8000776:	701a      	strb	r2, [r3, #0]
        }

        lastButtonState = buttonState;
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	73fb      	strb	r3, [r7, #15]
        vTaskDelay(50 / portTICK_PERIOD_MS);  // Evitar rebotes con un retardo
 800077c:	2032      	movs	r0, #50	@ 0x32
 800077e:	f002 f907 	bl	8002990 <vTaskDelay>
        buttonState = HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 8000782:	e7e1      	b.n	8000748 <Button_Task+0x10>
 8000784:	40020800 	.word	0x40020800
 8000788:	2000002c 	.word	0x2000002c

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 f984 	bl	8000ad6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <NMI_Handler+0x4>

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <MemManage_Handler+0x4>

080007f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <UsageFault_Handler+0x4>

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f881 	bl	800091c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800081a:	f002 fd55 	bl	80032c8 <xTaskGetSchedulerState>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d001      	beq.n	8000828 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000824:	f003 fb40 	bl	8003ea8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000888 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000854:	f7ff ffea 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	@ (8000890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	@ (800089c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800087e:	f003 fd9d 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fe55 	bl	8000530 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000888:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000894:	080044b8 	.word	0x080044b8
  ldr r2, =_sbss
 8000898:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800089c:	20004980 	.word	0x20004980

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>

080008a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f90a 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ac:	200f      	movs	r0, #15
 80008ae:	f000 f805 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b2:	f7ff ff6b 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f917 	bl	8000b0e <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 f8ed 	bl	8000ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	20000034 	.word	0x20000034

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000034 	.word	0x20000034

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <__NVIC_SetPriorityGrouping+0x40>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	4313      	orrs	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x40>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	05fa0000 	.word	0x05fa0000

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	@ (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	@ 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	@ 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff8e 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff47 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5c 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff8e 	bl	8000a14 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb0 	bl	8000a7c <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e175      	b.n	8000e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f040 8164 	bne.w	8000e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d005      	beq.n	8000b7e <HAL_GPIO_Init+0x56>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d130      	bne.n	8000be0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	f003 0201 	and.w	r2, r3, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d017      	beq.n	8000c1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d123      	bne.n	8000c70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	08da      	lsrs	r2, r3, #3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3208      	adds	r2, #8
 8000c6a:	69b9      	ldr	r1, [r7, #24]
 8000c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0203 	and.w	r2, r3, #3
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80be 	beq.w	8000e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b66      	ldr	r3, [pc, #408]	@ (8000e4c <HAL_GPIO_Init+0x324>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a65      	ldr	r2, [pc, #404]	@ (8000e4c <HAL_GPIO_Init+0x324>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b63      	ldr	r3, [pc, #396]	@ (8000e4c <HAL_GPIO_Init+0x324>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cca:	4a61      	ldr	r2, [pc, #388]	@ (8000e50 <HAL_GPIO_Init+0x328>)
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a58      	ldr	r2, [pc, #352]	@ (8000e54 <HAL_GPIO_Init+0x32c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d037      	beq.n	8000d66 <HAL_GPIO_Init+0x23e>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a57      	ldr	r2, [pc, #348]	@ (8000e58 <HAL_GPIO_Init+0x330>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d031      	beq.n	8000d62 <HAL_GPIO_Init+0x23a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a56      	ldr	r2, [pc, #344]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d02b      	beq.n	8000d5e <HAL_GPIO_Init+0x236>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a55      	ldr	r2, [pc, #340]	@ (8000e60 <HAL_GPIO_Init+0x338>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d025      	beq.n	8000d5a <HAL_GPIO_Init+0x232>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a54      	ldr	r2, [pc, #336]	@ (8000e64 <HAL_GPIO_Init+0x33c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01f      	beq.n	8000d56 <HAL_GPIO_Init+0x22e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a53      	ldr	r2, [pc, #332]	@ (8000e68 <HAL_GPIO_Init+0x340>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d019      	beq.n	8000d52 <HAL_GPIO_Init+0x22a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a52      	ldr	r2, [pc, #328]	@ (8000e6c <HAL_GPIO_Init+0x344>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x226>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a51      	ldr	r2, [pc, #324]	@ (8000e70 <HAL_GPIO_Init+0x348>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d00d      	beq.n	8000d4a <HAL_GPIO_Init+0x222>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a50      	ldr	r2, [pc, #320]	@ (8000e74 <HAL_GPIO_Init+0x34c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d007      	beq.n	8000d46 <HAL_GPIO_Init+0x21e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <HAL_GPIO_Init+0x350>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_GPIO_Init+0x21a>
 8000d3e:	2309      	movs	r3, #9
 8000d40:	e012      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d42:	230a      	movs	r3, #10
 8000d44:	e010      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d46:	2308      	movs	r3, #8
 8000d48:	e00e      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e00c      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d4e:	2306      	movs	r3, #6
 8000d50:	e00a      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d52:	2305      	movs	r3, #5
 8000d54:	e008      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d56:	2304      	movs	r3, #4
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e004      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x240>
 8000d66:	2300      	movs	r3, #0
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4093      	lsls	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d78:	4935      	ldr	r1, [pc, #212]	@ (8000e50 <HAL_GPIO_Init+0x328>)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d86:	4b3d      	ldr	r3, [pc, #244]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000daa:	4a34      	ldr	r2, [pc, #208]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db0:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd4:	4a29      	ldr	r2, [pc, #164]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dda:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <HAL_GPIO_Init+0x354>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	f67f ae86 	bls.w	8000b48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40021400 	.word	0x40021400
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	40021c00 	.word	0x40021c00
 8000e74:	40022000 	.word	0x40022000
 8000e78:	40022400 	.word	0x40022400
 8000e7c:	40013c00 	.word	0x40013c00

08000e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e001      	b.n	8000ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e29b      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8087 	beq.w	8001016 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f08:	4b96      	ldr	r3, [pc, #600]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d00c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f14:	4b93      	ldr	r3, [pc, #588]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d112      	bne.n	8000f46 <HAL_RCC_OscConfig+0x62>
 8000f20:	4b90      	ldr	r3, [pc, #576]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f2c:	d10b      	bne.n	8000f46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d06c      	beq.n	8001014 <HAL_RCC_OscConfig+0x130>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d168      	bne.n	8001014 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e275      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x7a>
 8000f50:	4b84      	ldr	r3, [pc, #528]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a83      	ldr	r2, [pc, #524]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e02e      	b.n	8000fbc <HAL_RCC_OscConfig+0xd8>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x9c>
 8000f66:	4b7f      	ldr	r3, [pc, #508]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b7c      	ldr	r3, [pc, #496]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7b      	ldr	r2, [pc, #492]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0xd8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000f8a:	4b76      	ldr	r3, [pc, #472]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a75      	ldr	r2, [pc, #468]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b73      	ldr	r3, [pc, #460]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a72      	ldr	r2, [pc, #456]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0xd8>
 8000fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcbe 	bl	8000944 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcba 	bl	8000944 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e229      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b61      	ldr	r3, [pc, #388]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fcaa 	bl	8000944 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fca6 	bl	8000944 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e215      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x110>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d069      	beq.n	80010f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001022:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800102e:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b08      	cmp	r3, #8
 8001038:	d11c      	bne.n	8001074 <HAL_RCC_OscConfig+0x190>
 800103a:	4b4a      	ldr	r3, [pc, #296]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d116      	bne.n	8001074 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_RCC_OscConfig+0x17a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e1e9      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	493d      	ldr	r1, [pc, #244]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	e040      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a38      	ldr	r2, [pc, #224]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001088:	f7ff fc5c 	bl	8000944 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fc58 	bl	8000944 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e1c7      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a2:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4929      	ldr	r1, [pc, #164]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
 80010c2:	e018      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc38 	bl	8000944 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc34 	bl	8000944 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1a3      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d038      	beq.n	8001174 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 800110c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800110e:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001116:	f7ff fc15 	bl	8000944 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff fc11 	bl	8000944 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e180      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x23a>
 800113c:	e01a      	b.n	8001174 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_RCC_OscConfig+0x280>)
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114a:	f7ff fbfb 	bl	8000944 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff fbf7 	bl	8000944 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d903      	bls.n	8001168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e166      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
 8001164:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	4b92      	ldr	r3, [pc, #584]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800116a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ee      	bne.n	8001152 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80a4 	beq.w	80012ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001182:	4b8c      	ldr	r3, [pc, #560]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10d      	bne.n	80011aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b89      	ldr	r3, [pc, #548]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a88      	ldr	r2, [pc, #544]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b86      	ldr	r3, [pc, #536]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011aa:	4b83      	ldr	r3, [pc, #524]	@ (80013b8 <HAL_RCC_OscConfig+0x4d4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80011b6:	4b80      	ldr	r3, [pc, #512]	@ (80013b8 <HAL_RCC_OscConfig+0x4d4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7f      	ldr	r2, [pc, #508]	@ (80013b8 <HAL_RCC_OscConfig+0x4d4>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fbbf 	bl	8000944 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fbbb 	bl	8000944 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	@ 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e12a      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011dc:	4b76      	ldr	r3, [pc, #472]	@ (80013b8 <HAL_RCC_OscConfig+0x4d4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x31a>
 80011f0:	4b70      	ldr	r3, [pc, #448]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f4:	4a6f      	ldr	r2, [pc, #444]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fc:	e02d      	b.n	800125a <HAL_RCC_OscConfig+0x376>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x33c>
 8001206:	4b6b      	ldr	r3, [pc, #428]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120a:	4a6a      	ldr	r2, [pc, #424]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6713      	str	r3, [r2, #112]	@ 0x70
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001216:	4a67      	ldr	r2, [pc, #412]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6713      	str	r3, [r2, #112]	@ 0x70
 800121e:	e01c      	b.n	800125a <HAL_RCC_OscConfig+0x376>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x35e>
 8001228:	4b62      	ldr	r3, [pc, #392]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800122c:	4a61      	ldr	r2, [pc, #388]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6713      	str	r3, [r2, #112]	@ 0x70
 8001234:	4b5f      	ldr	r3, [pc, #380]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001238:	4a5e      	ldr	r2, [pc, #376]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x376>
 8001242:	4b5c      	ldr	r3, [pc, #368]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001246:	4a5b      	ldr	r2, [pc, #364]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6713      	str	r3, [r2, #112]	@ 0x70
 800124e:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001252:	4a58      	ldr	r2, [pc, #352]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d015      	beq.n	800128e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff fb6f 	bl	8000944 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fb6b 	bl	8000944 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0d8      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	4b4c      	ldr	r3, [pc, #304]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ee      	beq.n	800126a <HAL_RCC_OscConfig+0x386>
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128e:	f7ff fb59 	bl	8000944 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb55 	bl	8000944 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0c2      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a3c      	ldr	r2, [pc, #240]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80ae 	beq.w	8001430 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d4:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d06d      	beq.n	80013bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d14b      	bne.n	8001380 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb26 	bl	8000944 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fb22 	bl	8000944 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e091      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130e:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	019b      	lsls	r3, r3, #6
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	3b01      	subs	r3, #1
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	071b      	lsls	r3, r3, #28
 8001346:	491b      	ldr	r1, [pc, #108]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a18      	ldr	r2, [pc, #96]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff faf4 	bl	8000944 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff faf0 	bl	8000944 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e05f      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x47c>
 800137e:	e057      	b.n	8001430 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 8001386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800138a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fada 	bl	8000944 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fad6 	bl	8000944 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e045      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_RCC_OscConfig+0x4d0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x4b0>
 80013b2:	e03d      	b.n	8001430 <HAL_RCC_OscConfig+0x54c>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <HAL_RCC_OscConfig+0x558>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d030      	beq.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d129      	bne.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d122      	bne.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d119      	bne.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	3b01      	subs	r3, #1
 8001406:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d10f      	bne.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d107      	bne.n	800142c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0d0      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b6a      	ldr	r3, [pc, #424]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d910      	bls.n	8001488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b67      	ldr	r3, [pc, #412]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 020f 	bic.w	r2, r3, #15
 800146e:	4965      	ldr	r1, [pc, #404]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b8      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a58      	ldr	r2, [pc, #352]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	494d      	ldr	r1, [pc, #308]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d040      	beq.n	8001564 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d115      	bne.n	8001522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e07f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e073      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06b      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f023 0203 	bic.w	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4936      	ldr	r1, [pc, #216]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001534:	f7ff fa06 	bl	8000944 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	e00a      	b.n	8001552 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff fa02 	bl	8000944 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e053      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 020c 	and.w	r2, r3, #12
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d1eb      	bne.n	800153c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d210      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 020f 	bic.w	r2, r3, #15
 800157a:	4922      	ldr	r1, [pc, #136]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e032      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4916      	ldr	r1, [pc, #88]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490e      	ldr	r1, [pc, #56]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 f821 	bl	8001618 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	490a      	ldr	r1, [pc, #40]	@ (800160c <HAL_RCC_ClockConfig+0x1cc>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_RCC_ClockConfig+0x1d0>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_ClockConfig+0x1d4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f962 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08004498 	.word	0x08004498
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800161c:	b090      	sub	sp, #64	@ 0x40
 800161e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001630:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d00d      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x40>
 800163c:	2b08      	cmp	r3, #8
 800163e:	f200 80a1 	bhi.w	8001784 <HAL_RCC_GetSysClockFreq+0x16c>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x34>
 8001646:	2b04      	cmp	r3, #4
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x3a>
 800164a:	e09b      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_GetSysClockFreq+0x184>)
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001650:	e09b      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001652:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001654:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001656:	e098      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001662:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d028      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	2200      	movs	r2, #0
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	627a      	str	r2, [r7, #36]	@ 0x24
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001680:	2100      	movs	r1, #0
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001684:	fb03 f201 	mul.w	r2, r3, r1
 8001688:	2300      	movs	r3, #0
 800168a:	fb00 f303 	mul.w	r3, r0, r3
 800168e:	4413      	add	r3, r2
 8001690:	4a43      	ldr	r2, [pc, #268]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001692:	fba0 1202 	umull	r1, r2, r0, r2
 8001696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001698:	460a      	mov	r2, r1
 800169a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800169c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800169e:	4413      	add	r3, r2
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a4:	2200      	movs	r2, #0
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	61fa      	str	r2, [r7, #28]
 80016aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016b2:	f7fe fdc5 	bl	8000240 <__aeabi_uldivmod>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4613      	mov	r3, r2
 80016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016be:	e053      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	2200      	movs	r2, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	617a      	str	r2, [r7, #20]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016d2:	f04f 0b00 	mov.w	fp, #0
 80016d6:	4652      	mov	r2, sl
 80016d8:	465b      	mov	r3, fp
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	0159      	lsls	r1, r3, #5
 80016e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e8:	0150      	lsls	r0, r2, #5
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	ebb2 080a 	subs.w	r8, r2, sl
 80016f2:	eb63 090b 	sbc.w	r9, r3, fp
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001702:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001706:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800170a:	ebb2 0408 	subs.w	r4, r2, r8
 800170e:	eb63 0509 	sbc.w	r5, r3, r9
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	00eb      	lsls	r3, r5, #3
 800171c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001720:	00e2      	lsls	r2, r4, #3
 8001722:	4614      	mov	r4, r2
 8001724:	461d      	mov	r5, r3
 8001726:	eb14 030a 	adds.w	r3, r4, sl
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	eb45 030b 	adc.w	r3, r5, fp
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173e:	4629      	mov	r1, r5
 8001740:	028b      	lsls	r3, r1, #10
 8001742:	4621      	mov	r1, r4
 8001744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001748:	4621      	mov	r1, r4
 800174a:	028a      	lsls	r2, r1, #10
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001752:	2200      	movs	r2, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	60fa      	str	r2, [r7, #12]
 8001758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175c:	f7fe fd70 	bl	8000240 <__aeabi_uldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4613      	mov	r3, r2
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	3301      	adds	r3, #1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001778:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001782:	e002      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_RCC_GetSysClockFreq+0x184>)
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800178c:	4618      	mov	r0, r3
 800178e:	3740      	adds	r7, #64	@ 0x40
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	017d7840 	.word	0x017d7840

080017a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ba:	f3ef 8305 	mrs	r3, IPSR
 80017be:	60bb      	str	r3, [r7, #8]
  return(result);
 80017c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c6:	f3ef 8310 	mrs	r3, PRIMASK
 80017ca:	607b      	str	r3, [r7, #4]
  return(result);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017d2:	f3ef 8311 	mrs	r3, BASEPRI
 80017d6:	603b      	str	r3, [r7, #0]
  return(result);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <osKernelInitialize+0x3a>
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <osKernelInitialize+0x64>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d103      	bne.n	80017ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80017e6:	f06f 0305 	mvn.w	r3, #5
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e00c      	b.n	8001808 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <osKernelInitialize+0x64>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <osKernelInitialize+0x64>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e002      	b.n	8001808 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000038 	.word	0x20000038

0800181c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001822:	f3ef 8305 	mrs	r3, IPSR
 8001826:	60bb      	str	r3, [r7, #8]
  return(result);
 8001828:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800182e:	f3ef 8310 	mrs	r3, PRIMASK
 8001832:	607b      	str	r3, [r7, #4]
  return(result);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800183a:	f3ef 8311 	mrs	r3, BASEPRI
 800183e:	603b      	str	r3, [r7, #0]
  return(result);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <osKernelStart+0x3a>
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <osKernelStart+0x68>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d103      	bne.n	8001856 <osKernelStart+0x3a>
    stat = osErrorISR;
 800184e:	f06f 0305 	mvn.w	r3, #5
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e010      	b.n	8001878 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <osKernelStart+0x68>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d109      	bne.n	8001872 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800185e:	f7ff ffa1 	bl	80017a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <osKernelStart+0x68>)
 8001864:	2202      	movs	r2, #2
 8001866:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001868:	f001 f8ca 	bl	8002a00 <vTaskStartScheduler>
      stat = osOK;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e002      	b.n	8001878 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000038 	.word	0x20000038

08001888 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	@ 0x40
 800188c:	af04      	add	r7, sp, #16
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001898:	f3ef 8305 	mrs	r3, IPSR
 800189c:	61fb      	str	r3, [r7, #28]
  return(result);
 800189e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 808f 	bne.w	80019c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018a6:	f3ef 8310 	mrs	r3, PRIMASK
 80018aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018b2:	f3ef 8311 	mrs	r3, BASEPRI
 80018b6:	617b      	str	r3, [r7, #20]
  return(result);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <osThreadNew+0x3e>
 80018be:	4b44      	ldr	r3, [pc, #272]	@ (80019d0 <osThreadNew+0x148>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d07e      	beq.n	80019c4 <osThreadNew+0x13c>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d07b      	beq.n	80019c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80018d0:	2318      	movs	r3, #24
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d045      	beq.n	8001970 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <osThreadNew+0x6a>
        name = attr->name;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <osThreadNew+0x90>
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	2b38      	cmp	r3, #56	@ 0x38
 800190a:	d805      	bhi.n	8001918 <osThreadNew+0x90>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <osThreadNew+0x94>
        return (NULL);
 8001918:	2300      	movs	r3, #0
 800191a:	e054      	b.n	80019c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00e      	beq.n	8001952 <osThreadNew+0xca>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b5b      	cmp	r3, #91	@ 0x5b
 800193a:	d90a      	bls.n	8001952 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <osThreadNew+0xca>
        mem = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	e010      	b.n	8001974 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <osThreadNew+0xec>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <osThreadNew+0xec>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d104      	bne.n	8001974 <osThreadNew+0xec>
          mem = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	e001      	b.n	8001974 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d110      	bne.n	800199c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800198e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fe4f 	bl	8002634 <xTaskCreateStatic>
 8001996:	4603      	mov	r3, r0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e013      	b.n	80019c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d110      	bne.n	80019c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fea3 	bl	8002700 <xTaskCreate>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d001      	beq.n	80019c4 <osThreadNew+0x13c>
          hTask = NULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019c4:	693b      	ldr	r3, [r7, #16]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3730      	adds	r7, #48	@ 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000038 	.word	0x20000038

080019d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019dc:	f3ef 8305 	mrs	r3, IPSR
 80019e0:	613b      	str	r3, [r7, #16]
  return(result);
 80019e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e8:	f3ef 8310 	mrs	r3, PRIMASK
 80019ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019f4:	f3ef 8311 	mrs	r3, BASEPRI
 80019f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <osDelay+0x3c>
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <osDelay+0x58>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d103      	bne.n	8001a10 <osDelay+0x3c>
    stat = osErrorISR;
 8001a08:	f06f 0305 	mvn.w	r3, #5
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e007      	b.n	8001a20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 ffb8 	bl	8002990 <vTaskDelay>
    }
  }

  return (stat);
 8001a20:	697b      	ldr	r3, [r7, #20]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000038 	.word	0x20000038

08001a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <vApplicationGetIdleTaskMemory+0x30>)
 8001a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000003c 	.word	0x2000003c
 8001a60:	20000098 	.word	0x20000098

08001a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <vApplicationGetTimerTaskMemory+0x30>)
 8001a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000298 	.word	0x20000298
 8001a94:	200002f4 	.word	0x200002f4

08001a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0208 	add.w	r2, r3, #8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0208 	add.w	r2, r3, #8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0208 	add.w	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d103      	bne.n	8001b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e00c      	b.n	8001b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e002      	b.n	8001b68 <vListInsert+0x2e>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d2f6      	bcs.n	8001b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6892      	ldr	r2, [r2, #8]
 8001bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6852      	ldr	r2, [r2, #4]
 8001bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d103      	bne.n	8001be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c18:	b672      	cpsid	i
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	b662      	cpsie	i
 8001c28:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001c30:	f002 f8a4 	bl	8003d7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	441a      	add	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	3b01      	subs	r3, #1
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	441a      	add	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	22ff      	movs	r2, #255	@ 0xff
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d114      	bne.n	8001cb0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01a      	beq.n	8001cc4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3310      	adds	r3, #16
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 f950 	bl	8002f38 <xTaskRemoveFromEventList>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <xQueueGenericReset+0xd4>)
 8001ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	e009      	b.n	8001cc4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff feef 	bl	8001a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3324      	adds	r3, #36	@ 0x24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff feea 	bl	8001a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cc4:	f002 f890 	bl	8003de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000ed04 	.word	0xe000ed04

08001cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	@ 0x38
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10d      	bne.n	8001d08 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8001d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d12:	b672      	cpsid	i
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	b662      	cpsie	i
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <xQueueGenericCreateStatic+0x5e>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <xQueueGenericCreateStatic+0x62>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <xQueueGenericCreateStatic+0x64>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d44:	b672      	cpsid	i
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	b662      	cpsie	i
 8001d54:	623b      	str	r3, [r7, #32]
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <xQueueGenericCreateStatic+0x90>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <xQueueGenericCreateStatic+0x94>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <xQueueGenericCreateStatic+0x96>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8001d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d76:	b672      	cpsid	i
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	b662      	cpsie	i
 8001d86:	61fb      	str	r3, [r7, #28]
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d8e:	2350      	movs	r3, #80	@ 0x50
 8001d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b50      	cmp	r3, #80	@ 0x50
 8001d96:	d00d      	beq.n	8001db4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8001d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d9c:	b672      	cpsid	i
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	b662      	cpsie	i
 8001dac:	61bb      	str	r3, [r7, #24]
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001db4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dc8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f805 	bl	8001de6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e002      	b.n	8001e08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e14:	2101      	movs	r1, #1
 8001e16:	69b8      	ldr	r0, [r7, #24]
 8001e18:	f7ff fef2 	bl	8001c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	@ 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10d      	bne.n	8001e64 <xQueueGenericSend+0x38>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4c:	b672      	cpsid	i
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	b662      	cpsie	i
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <xQueueGenericSend+0x46>
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <xQueueGenericSend+0x4a>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <xQueueGenericSend+0x4c>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <xQueueGenericSend+0x6c>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e80:	b672      	cpsid	i
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	b662      	cpsie	i
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d103      	bne.n	8001ea6 <xQueueGenericSend+0x7a>
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <xQueueGenericSend+0x7e>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <xQueueGenericSend+0x80>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <xQueueGenericSend+0xa0>
	__asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb4:	b672      	cpsid	i
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	b662      	cpsie	i
 8001ec4:	623b      	str	r3, [r7, #32]
}
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ecc:	f001 f9fc 	bl	80032c8 <xTaskGetSchedulerState>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <xQueueGenericSend+0xb0>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <xQueueGenericSend+0xb4>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <xQueueGenericSend+0xb6>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <xQueueGenericSend+0xd6>
	__asm volatile
 8001ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eea:	b672      	cpsid	i
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	b662      	cpsie	i
 8001efa:	61fb      	str	r3, [r7, #28]
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	e7fd      	b.n	8001efe <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f02:	f001 ff3b 	bl	8003d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <xQueueGenericSend+0xec>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d129      	bne.n	8001f6c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f1e:	f000 fa1b 	bl	8002358 <prvCopyDataToQueue>
 8001f22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2e:	3324      	adds	r3, #36	@ 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 f801 	bl	8002f38 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <xQueueGenericSend+0x210>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	e00a      	b.n	8001f64 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f54:	4b39      	ldr	r3, [pc, #228]	@ (800203c <xQueueGenericSend+0x210>)
 8001f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f64:	f001 ff40 	bl	8003de8 <vPortExitCritical>
				return pdPASS;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e063      	b.n	8002034 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f72:	f001 ff39 	bl	8003de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e05c      	b.n	8002034 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f83d 	bl	8003004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f8e:	f001 ff2b 	bl	8003de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f92:	f000 fda1 	bl	8002ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f96:	f001 fef1 	bl	8003d7c <vPortEnterCritical>
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d103      	bne.n	8001fb0 <xQueueGenericSend+0x184>
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d103      	bne.n	8001fc6 <xQueueGenericSend+0x19a>
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fc6:	f001 ff0f 	bl	8003de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fca:	1d3a      	adds	r2, r7, #4
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 f82c 	bl	8003030 <xTaskCheckForTimeOut>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d124      	bne.n	8002028 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fe0:	f000 fab2 	bl	8002548 <prvIsQueueFull>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d018      	beq.n	800201c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fec:	3310      	adds	r3, #16
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 ff4a 	bl	8002e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ffa:	f000 fa3d 	bl	8002478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ffe:	f000 fd79 	bl	8002af4 <xTaskResumeAll>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f af7c 	bne.w	8001f02 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <xQueueGenericSend+0x210>)
 800200c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	e772      	b.n	8001f02 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800201c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800201e:	f000 fa2b 	bl	8002478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002022:	f000 fd67 	bl	8002af4 <xTaskResumeAll>
 8002026:	e76c      	b.n	8001f02 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800202a:	f000 fa25 	bl	8002478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800202e:	f000 fd61 	bl	8002af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002034:	4618      	mov	r0, r3
 8002036:	3738      	adds	r7, #56	@ 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	e000ed04 	.word	0xe000ed04

08002040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	@ 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8002058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800205c:	b672      	cpsid	i
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	b662      	cpsie	i
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <xQueueGenericSendFromISR+0x42>
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <xQueueGenericSendFromISR+0x46>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <xQueueGenericSendFromISR+0x48>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800208c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002090:	b672      	cpsid	i
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	b662      	cpsie	i
 80020a0:	623b      	str	r3, [r7, #32]
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d103      	bne.n	80020b6 <xQueueGenericSendFromISR+0x76>
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <xQueueGenericSendFromISR+0x7a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <xQueueGenericSendFromISR+0x7c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c4:	b672      	cpsid	i
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	b662      	cpsie	i
 80020d4:	61fb      	str	r3, [r7, #28]
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020dc:	f001 ff36 	bl	8003f4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020e0:	f3ef 8211 	mrs	r2, BASEPRI
 80020e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e8:	b672      	cpsid	i
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	b662      	cpsie	i
 80020f8:	61ba      	str	r2, [r7, #24]
 80020fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	429a      	cmp	r2, r3
 800210a:	d302      	bcc.n	8002112 <xQueueGenericSendFromISR+0xd2>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d12c      	bne.n	800216c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002122:	f000 f919 	bl	8002358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002126:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d112      	bne.n	8002156 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d016      	beq.n	8002166 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	3324      	adds	r3, #36	@ 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fefb 	bl	8002f38 <xTaskRemoveFromEventList>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800215a:	3301      	adds	r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	b25a      	sxtb	r2, r3
 8002160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002166:	2301      	movs	r3, #1
 8002168:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800216a:	e001      	b.n	8002170 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002172:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800217a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800217c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800217e:	4618      	mov	r0, r3
 8002180:	3738      	adds	r7, #56	@ 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	@ 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <xQueueReceive+0x36>
	__asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a6:	b672      	cpsid	i
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	b662      	cpsie	i
 80021b6:	623b      	str	r3, [r7, #32]
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d103      	bne.n	80021cc <xQueueReceive+0x44>
 80021c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <xQueueReceive+0x48>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <xQueueReceive+0x4a>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <xQueueReceive+0x6a>
	__asm volatile
 80021d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021da:	b672      	cpsid	i
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	b662      	cpsie	i
 80021ea:	61fb      	str	r3, [r7, #28]
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	e7fd      	b.n	80021ee <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021f2:	f001 f869 	bl	80032c8 <xTaskGetSchedulerState>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <xQueueReceive+0x7a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <xQueueReceive+0x7e>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <xQueueReceive+0x80>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10d      	bne.n	8002228 <xQueueReceive+0xa0>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	b672      	cpsid	i
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	b662      	cpsie	i
 8002220:	61bb      	str	r3, [r7, #24]
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002228:	f001 fda8 	bl	8003d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01f      	beq.n	8002278 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800223c:	f000 f8f6 	bl	800242c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00f      	beq.n	8002270 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002252:	3310      	adds	r3, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fe6f 	bl	8002f38 <xTaskRemoveFromEventList>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002260:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <xQueueReceive+0x1cc>)
 8002262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002270:	f001 fdba 	bl	8003de8 <vPortExitCritical>
				return pdPASS;
 8002274:	2301      	movs	r3, #1
 8002276:	e069      	b.n	800234c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800227e:	f001 fdb3 	bl	8003de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002282:	2300      	movs	r3, #0
 8002284:	e062      	b.n	800234c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f000 feb7 	bl	8003004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800229a:	f001 fda5 	bl	8003de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800229e:	f000 fc1b 	bl	8002ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022a2:	f001 fd6b 	bl	8003d7c <vPortEnterCritical>
 80022a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b2:	d103      	bne.n	80022bc <xQueueReceive+0x134>
 80022b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d103      	bne.n	80022d2 <xQueueReceive+0x14a>
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022d2:	f001 fd89 	bl	8003de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022d6:	1d3a      	adds	r2, r7, #4
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fea6 	bl	8003030 <xTaskCheckForTimeOut>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d123      	bne.n	8002332 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ec:	f000 f916 	bl	800251c <prvIsQueueEmpty>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d017      	beq.n	8002326 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	3324      	adds	r3, #36	@ 0x24
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fdc4 	bl	8002e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002306:	f000 f8b7 	bl	8002478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800230a:	f000 fbf3 	bl	8002af4 <xTaskResumeAll>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d189      	bne.n	8002228 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <xQueueReceive+0x1cc>)
 8002316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	e780      	b.n	8002228 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002328:	f000 f8a6 	bl	8002478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800232c:	f000 fbe2 	bl	8002af4 <xTaskResumeAll>
 8002330:	e77a      	b.n	8002228 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002334:	f000 f8a0 	bl	8002478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002338:	f000 fbdc 	bl	8002af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800233c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800233e:	f000 f8ed 	bl	800251c <prvIsQueueEmpty>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f43f af6f 	beq.w	8002228 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800234a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800234c:	4618      	mov	r0, r3
 800234e:	3730      	adds	r7, #48	@ 0x30
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	e000ed04 	.word	0xe000ed04

08002358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d14d      	bne.n	800241a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 ffbe 	bl	8003304 <xTaskPriorityDisinherit>
 8002388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e043      	b.n	800241a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d119      	bne.n	80023cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6858      	ldr	r0, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	461a      	mov	r2, r3
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	f002 f82e 	bl	8004404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	441a      	add	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d32b      	bcc.n	800241a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	e026      	b.n	800241a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68d8      	ldr	r0, [r3, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	461a      	mov	r2, r3
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	f002 f814 	bl	8004404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	425b      	negs	r3, r3
 80023e6:	441a      	add	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	425b      	negs	r3, r3
 8002402:	441a      	add	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d105      	bne.n	800241a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	3b01      	subs	r3, #1
 8002418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002422:	697b      	ldr	r3, [r7, #20]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d018      	beq.n	8002470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	441a      	add	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	d303      	bcc.n	8002460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	461a      	mov	r2, r3
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	f001 ffca 	bl	8004404 <memcpy>
	}
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002480:	f001 fc7c 	bl	8003d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800248a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800248c:	e011      	b.n	80024b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3324      	adds	r3, #36	@ 0x24
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd4c 	bl	8002f38 <xTaskRemoveFromEventList>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80024a6:	f000 fe2b 	bl	8003100 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	dce9      	bgt.n	800248e <prvUnlockQueue+0x16>
 80024ba:	e000      	b.n	80024be <prvUnlockQueue+0x46>
					break;
 80024bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	22ff      	movs	r2, #255	@ 0xff
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80024c6:	f001 fc8f 	bl	8003de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80024ca:	f001 fc57 	bl	8003d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024d6:	e011      	b.n	80024fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3310      	adds	r3, #16
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd27 	bl	8002f38 <xTaskRemoveFromEventList>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80024f0:	f000 fe06 	bl	8003100 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002500:	2b00      	cmp	r3, #0
 8002502:	dce9      	bgt.n	80024d8 <prvUnlockQueue+0x60>
 8002504:	e000      	b.n	8002508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	22ff      	movs	r2, #255	@ 0xff
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002510:	f001 fc6a 	bl	8003de8 <vPortExitCritical>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002524:	f001 fc2a 	bl	8003d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002530:	2301      	movs	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e001      	b.n	800253a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800253a:	f001 fc55 	bl	8003de8 <vPortExitCritical>

	return xReturn;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002550:	f001 fc14 	bl	8003d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255c:	429a      	cmp	r2, r3
 800255e:	d102      	bne.n	8002566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002560:	2301      	movs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e001      	b.n	800256a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800256a:	f001 fc3d 	bl	8003de8 <vPortExitCritical>

	return xReturn;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e014      	b.n	80025b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002588:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <vQueueAddToRegistry+0x50>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <vQueueAddToRegistry+0x50>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <vQueueAddToRegistry+0x50>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80025aa:	e006      	b.n	80025ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d9e7      	bls.n	8002588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200006f4 	.word	0x200006f4

080025cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025dc:	f001 fbce 	bl	8003d7c <vPortEnterCritical>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d103      	bne.n	80025f6 <vQueueWaitForMessageRestricted+0x2a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d103      	bne.n	800260c <vQueueWaitForMessageRestricted+0x40>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800260c:	f001 fbec 	bl	8003de8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3324      	adds	r3, #36	@ 0x24
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fc5b 	bl	8002edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff26 	bl	8002478 <prvUnlockQueue>
	}
 800262c:	bf00      	nop
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	@ 0x38
 8002638:	af04      	add	r7, sp, #16
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <xTaskCreateStatic+0x30>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264c:	b672      	cpsid	i
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	b662      	cpsie	i
 800265c:	623b      	str	r3, [r7, #32]
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <xTaskCreateStatic+0x52>
	__asm volatile
 800266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266e:	b672      	cpsid	i
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	b662      	cpsie	i
 800267e:	61fb      	str	r3, [r7, #28]
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	e7fd      	b.n	8002682 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002686:	235c      	movs	r3, #92	@ 0x5c
 8002688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b5c      	cmp	r3, #92	@ 0x5c
 800268e:	d00d      	beq.n	80026ac <xTaskCreateStatic+0x78>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	b672      	cpsid	i
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	b662      	cpsie	i
 80026a4:	61bb      	str	r3, [r7, #24]
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01e      	beq.n	80026f2 <xTaskCreateStatic+0xbe>
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01b      	beq.n	80026f2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026cc:	2300      	movs	r3, #0
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f850 	bl	800278a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026ec:	f000 f8e0 	bl	80028b0 <prvAddNewTaskToReadyList>
 80026f0:	e001      	b.n	80026f6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026f6:	697b      	ldr	r3, [r7, #20]
	}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3728      	adds	r7, #40	@ 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af04      	add	r7, sp, #16
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f001 fc5f 	bl	8003fd8 <pvPortMalloc>
 800271a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00e      	beq.n	8002740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002722:	205c      	movs	r0, #92	@ 0x5c
 8002724:	f001 fc58 	bl	8003fd8 <pvPortMalloc>
 8002728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
 8002736:	e005      	b.n	8002744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002738:	6978      	ldr	r0, [r7, #20]
 800273a:	f001 fd1b 	bl	8004174 <vPortFree>
 800273e:	e001      	b.n	8002744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d017      	beq.n	800277a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	2300      	movs	r3, #0
 8002756:	9303      	str	r3, [sp, #12]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f80e 	bl	800278a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800276e:	69f8      	ldr	r0, [r7, #28]
 8002770:	f000 f89e 	bl	80028b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002774:	2301      	movs	r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e002      	b.n	8002780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002780:	69bb      	ldr	r3, [r7, #24]
	}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	461a      	mov	r2, r3
 80027a2:	21a5      	movs	r1, #165	@ 0xa5
 80027a4:	f001 fe02 	bl	80043ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80027b2:	440b      	add	r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f023 0307 	bic.w	r3, r3, #7
 80027c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d0:	b672      	cpsid	i
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	b662      	cpsie	i
 80027e0:	617b      	str	r3, [r7, #20]
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e012      	b.n	800281a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	7819      	ldrb	r1, [r3, #0]
 80027fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4413      	add	r3, r2
 8002802:	3334      	adds	r3, #52	@ 0x34
 8002804:	460a      	mov	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3301      	adds	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d9e9      	bls.n	80027f4 <prvInitialiseNewTask+0x6a>
 8002820:	e000      	b.n	8002824 <prvInitialiseNewTask+0x9a>
			{
				break;
 8002822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800282c:	e003      	b.n	8002836 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002838:	2b37      	cmp	r3, #55	@ 0x37
 800283a:	d901      	bls.n	8002840 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800283c:	2337      	movs	r3, #55	@ 0x37
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800284a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	3304      	adds	r3, #4
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f93e 	bl	8001ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	3318      	adds	r3, #24
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f939 	bl	8001ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	2200      	movs	r2, #0
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	69b8      	ldr	r0, [r7, #24]
 8002890:	f001 f968 	bl	8003b64 <pxPortInitialiseStack>
 8002894:	4602      	mov	r2, r0
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800289a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028a6:	bf00      	nop
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028b8:	f001 fa60 	bl	8003d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <prvAddNewTaskToReadyList+0xc4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002974 <prvAddNewTaskToReadyList+0xc4>)
 80028c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <prvAddNewTaskToReadyList+0xc8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <prvAddNewTaskToReadyList+0xc8>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <prvAddNewTaskToReadyList+0xc4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d110      	bne.n	80028fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028dc:	f000 fc34 	bl	8003148 <prvInitialiseTaskLists>
 80028e0:	e00d      	b.n	80028fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <prvAddNewTaskToReadyList+0xcc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028ea:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <prvAddNewTaskToReadyList+0xc8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d802      	bhi.n	80028fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <prvAddNewTaskToReadyList+0xc8>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <prvAddNewTaskToReadyList+0xd0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <prvAddNewTaskToReadyList+0xd0>)
 8002906:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <prvAddNewTaskToReadyList+0xd0>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <prvAddNewTaskToReadyList+0xd4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d903      	bls.n	8002924 <prvAddNewTaskToReadyList+0x74>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4a18      	ldr	r2, [pc, #96]	@ (8002984 <prvAddNewTaskToReadyList+0xd4>)
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <prvAddNewTaskToReadyList+0xd8>)
 8002932:	441a      	add	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f7ff f8d9 	bl	8001af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002940:	f001 fa52 	bl	8003de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <prvAddNewTaskToReadyList+0xcc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <prvAddNewTaskToReadyList+0xc8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	429a      	cmp	r2, r3
 8002958:	d207      	bcs.n	800296a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <prvAddNewTaskToReadyList+0xdc>)
 800295c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000c08 	.word	0x20000c08
 8002978:	20000734 	.word	0x20000734
 800297c:	20000c14 	.word	0x20000c14
 8002980:	20000c24 	.word	0x20000c24
 8002984:	20000c10 	.word	0x20000c10
 8002988:	20000738 	.word	0x20000738
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01a      	beq.n	80029d8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <vTaskDelay+0x68>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <vTaskDelay+0x36>
	__asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ae:	b672      	cpsid	i
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	b662      	cpsie	i
 80029be:	60bb      	str	r3, [r7, #8]
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80029c6:	f000 f887 	bl	8002ad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029ca:	2100      	movs	r1, #0
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fd0d 	bl	80033ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029d2:	f000 f88f 	bl	8002af4 <xTaskResumeAll>
 80029d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <vTaskDelay+0x6c>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000c30 	.word	0x20000c30
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a0e:	463a      	mov	r2, r7
 8002a10:	1d39      	adds	r1, r7, #4
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f80a 	bl	8001a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	9202      	str	r2, [sp, #8]
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	4924      	ldr	r1, [pc, #144]	@ (8002ac0 <vTaskStartScheduler+0xc0>)
 8002a30:	4824      	ldr	r0, [pc, #144]	@ (8002ac4 <vTaskStartScheduler+0xc4>)
 8002a32:	f7ff fdff 	bl	8002634 <xTaskCreateStatic>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <vTaskStartScheduler+0xc8>)
 8002a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <vTaskStartScheduler+0xc8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a44:	2301      	movs	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e001      	b.n	8002a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a54:	f000 fd1e 	bl	8003494 <xTimerCreateTimerTask>
 8002a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d118      	bne.n	8002a92 <vTaskStartScheduler+0x92>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a64:	b672      	cpsid	i
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	b662      	cpsie	i
 8002a74:	613b      	str	r3, [r7, #16]
}
 8002a76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a78:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <vTaskStartScheduler+0xcc>)
 8002a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <vTaskStartScheduler+0xd0>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a86:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <vTaskStartScheduler+0xd4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a8c:	f001 f8f8 	bl	8003c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a90:	e011      	b.n	8002ab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d10d      	bne.n	8002ab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	b672      	cpsid	i
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	b662      	cpsie	i
 8002aae:	60fb      	str	r3, [r7, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <vTaskStartScheduler+0xb2>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	0800445c 	.word	0x0800445c
 8002ac4:	08003119 	.word	0x08003119
 8002ac8:	20000c2c 	.word	0x20000c2c
 8002acc:	20000c28 	.word	0x20000c28
 8002ad0:	20000c14 	.word	0x20000c14
 8002ad4:	20000c0c 	.word	0x20000c0c

08002ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <vTaskSuspendAll+0x18>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a03      	ldr	r2, [pc, #12]	@ (8002af0 <vTaskSuspendAll+0x18>)
 8002ae4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	20000c30 	.word	0x20000c30

08002af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b02:	4b43      	ldr	r3, [pc, #268]	@ (8002c10 <xTaskResumeAll+0x11c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <xTaskResumeAll+0x32>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0e:	b672      	cpsid	i
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	b662      	cpsie	i
 8002b1e:	603b      	str	r3, [r7, #0]
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b26:	f001 f929 	bl	8003d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b2a:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <xTaskResumeAll+0x11c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	4a37      	ldr	r2, [pc, #220]	@ (8002c10 <xTaskResumeAll+0x11c>)
 8002b32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <xTaskResumeAll+0x11c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d162      	bne.n	8002c02 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b3c:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <xTaskResumeAll+0x120>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05e      	beq.n	8002c02 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b44:	e02f      	b.n	8002ba6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <xTaskResumeAll+0x124>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3318      	adds	r3, #24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f82a 	bl	8001bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f825 	bl	8001bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b66:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <xTaskResumeAll+0x128>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d903      	bls.n	8002b76 <xTaskResumeAll+0x82>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <xTaskResumeAll+0x128>)
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <xTaskResumeAll+0x12c>)
 8002b84:	441a      	add	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7fe ffb0 	bl	8001af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <xTaskResumeAll+0x130>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <xTaskResumeAll+0x134>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <xTaskResumeAll+0x124>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1cb      	bne.n	8002b46 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002bb4:	f000 fb68 	bl	8003288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <xTaskResumeAll+0x138>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bc4:	f000 f846 	bl	8002c54 <xTaskIncrementTick>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002bce:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <xTaskResumeAll+0x134>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f1      	bne.n	8002bc4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <xTaskResumeAll+0x138>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <xTaskResumeAll+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <xTaskResumeAll+0x13c>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c02:	f001 f8f1 	bl	8003de8 <vPortExitCritical>

	return xAlreadyYielded;
 8002c06:	68bb      	ldr	r3, [r7, #8]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000c30 	.word	0x20000c30
 8002c14:	20000c08 	.word	0x20000c08
 8002c18:	20000bc8 	.word	0x20000bc8
 8002c1c:	20000c10 	.word	0x20000c10
 8002c20:	20000738 	.word	0x20000738
 8002c24:	20000734 	.word	0x20000734
 8002c28:	20000c1c 	.word	0x20000c1c
 8002c2c:	20000c18 	.word	0x20000c18
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <xTaskGetTickCount+0x1c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000c0c 	.word	0x20000c0c

08002c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c5e:	4b50      	ldr	r3, [pc, #320]	@ (8002da0 <xTaskIncrementTick+0x14c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 808c 	bne.w	8002d80 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c68:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <xTaskIncrementTick+0x150>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c70:	4a4c      	ldr	r2, [pc, #304]	@ (8002da4 <xTaskIncrementTick+0x150>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d123      	bne.n	8002cc4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <xTaskIncrementTick+0x154>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	b672      	cpsid	i
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	b662      	cpsie	i
 8002c9a:	603b      	str	r3, [r7, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	e7fd      	b.n	8002c9e <xTaskIncrementTick+0x4a>
 8002ca2:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <xTaskIncrementTick+0x154>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <xTaskIncrementTick+0x158>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3e      	ldr	r2, [pc, #248]	@ (8002da8 <xTaskIncrementTick+0x154>)
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4a3e      	ldr	r2, [pc, #248]	@ (8002dac <xTaskIncrementTick+0x158>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <xTaskIncrementTick+0x15c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <xTaskIncrementTick+0x15c>)
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	f000 fae2 	bl	8003288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002db4 <xTaskIncrementTick+0x160>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d349      	bcc.n	8002d62 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cce:	4b36      	ldr	r3, [pc, #216]	@ (8002da8 <xTaskIncrementTick+0x154>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <xTaskIncrementTick+0x160>)
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295
 8002cde:	601a      	str	r2, [r3, #0]
					break;
 8002ce0:	e03f      	b.n	8002d62 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <xTaskIncrementTick+0x154>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d203      	bcs.n	8002d02 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8002db4 <xTaskIncrementTick+0x160>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d00:	e02f      	b.n	8002d62 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ff50 	bl	8001bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3318      	adds	r3, #24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe ff47 	bl	8001bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d22:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <xTaskIncrementTick+0x164>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d903      	bls.n	8002d32 <xTaskIncrementTick+0xde>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <xTaskIncrementTick+0x164>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <xTaskIncrementTick+0x168>)
 8002d40:	441a      	add	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3304      	adds	r3, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7fe fed2 	bl	8001af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d52:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <xTaskIncrementTick+0x16c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3b8      	bcc.n	8002cce <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d60:	e7b5      	b.n	8002cce <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d62:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <xTaskIncrementTick+0x16c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d68:	4914      	ldr	r1, [pc, #80]	@ (8002dbc <xTaskIncrementTick+0x168>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d907      	bls.n	8002d8a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e004      	b.n	8002d8a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <xTaskIncrementTick+0x170>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc4 <xTaskIncrementTick+0x170>)
 8002d88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <xTaskIncrementTick+0x174>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d96:	697b      	ldr	r3, [r7, #20]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000c30 	.word	0x20000c30
 8002da4:	20000c0c 	.word	0x20000c0c
 8002da8:	20000bc0 	.word	0x20000bc0
 8002dac:	20000bc4 	.word	0x20000bc4
 8002db0:	20000c20 	.word	0x20000c20
 8002db4:	20000c28 	.word	0x20000c28
 8002db8:	20000c10 	.word	0x20000c10
 8002dbc:	20000738 	.word	0x20000738
 8002dc0:	20000734 	.word	0x20000734
 8002dc4:	20000c18 	.word	0x20000c18
 8002dc8:	20000c1c 	.word	0x20000c1c

08002dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <vTaskSwitchContext+0xac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002dda:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <vTaskSwitchContext+0xb0>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002de0:	e044      	b.n	8002e6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002de2:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <vTaskSwitchContext+0xb0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de8:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <vTaskSwitchContext+0xb4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e013      	b.n	8002e18 <vTaskSwitchContext+0x4c>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <vTaskSwitchContext+0x46>
	__asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	b672      	cpsid	i
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	b662      	cpsie	i
 8002e0a:	607b      	str	r3, [r7, #4]
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	e7fd      	b.n	8002e0e <vTaskSwitchContext+0x42>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	491a      	ldr	r1, [pc, #104]	@ (8002e84 <vTaskSwitchContext+0xb8>)
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0e1      	beq.n	8002df0 <vTaskSwitchContext+0x24>
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4a13      	ldr	r2, [pc, #76]	@ (8002e84 <vTaskSwitchContext+0xb8>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d104      	bne.n	8002e5c <vTaskSwitchContext+0x90>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <vTaskSwitchContext+0xbc>)
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4a06      	ldr	r2, [pc, #24]	@ (8002e80 <vTaskSwitchContext+0xb4>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	20000c30 	.word	0x20000c30
 8002e7c:	20000c1c 	.word	0x20000c1c
 8002e80:	20000c10 	.word	0x20000c10
 8002e84:	20000738 	.word	0x20000738
 8002e88:	20000734 	.word	0x20000734

08002e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea0:	b672      	cpsid	i
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	b662      	cpsie	i
 8002eb0:	60fb      	str	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <vTaskPlaceOnEventList+0x4c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe fe3a 	bl	8001b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	f000 fa8f 	bl	80033ec <prvAddCurrentTaskToDelayedList>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000734 	.word	0x20000734

08002edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef2:	b672      	cpsid	i
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	b662      	cpsie	i
 8002f02:	617b      	str	r3, [r7, #20]
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	e7fd      	b.n	8002f06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <vTaskPlaceOnEventListRestricted+0x58>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7fe fded 	bl	8001af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f000 fa60 	bl	80033ec <prvAddCurrentTaskToDelayedList>
	}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000734 	.word	0x20000734

08002f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f52:	b672      	cpsid	i
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	b662      	cpsie	i
 8002f62:	60fb      	str	r3, [r7, #12]
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fe1c 	bl	8001bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <xTaskRemoveFromEventList+0xb4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11d      	bne.n	8002fb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fe13 	bl	8001bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <xTaskRemoveFromEventList+0xb8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d903      	bls.n	8002f9a <xTaskRemoveFromEventList+0x62>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <xTaskRemoveFromEventList+0xb8>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <xTaskRemoveFromEventList+0xbc>)
 8002fa8:	441a      	add	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fe fd9e 	bl	8001af2 <vListInsertEnd>
 8002fb6:	e005      	b.n	8002fc4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480e      	ldr	r0, [pc, #56]	@ (8002ff8 <xTaskRemoveFromEventList+0xc0>)
 8002fc0:	f7fe fd97 	bl	8001af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <xTaskRemoveFromEventList+0xc4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d905      	bls.n	8002fde <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <xTaskRemoveFromEventList+0xc8>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e001      	b.n	8002fe2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002fe2:	697b      	ldr	r3, [r7, #20]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000c30 	.word	0x20000c30
 8002ff0:	20000c10 	.word	0x20000c10
 8002ff4:	20000738 	.word	0x20000738
 8002ff8:	20000bc8 	.word	0x20000bc8
 8002ffc:	20000734 	.word	0x20000734
 8003000:	20000c1c 	.word	0x20000c1c

08003004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <vTaskInternalSetTimeOutState+0x24>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <vTaskInternalSetTimeOutState+0x28>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000c20 	.word	0x20000c20
 800302c:	20000c0c 	.word	0x20000c0c

08003030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003044:	b672      	cpsid	i
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	b662      	cpsie	i
 8003054:	613b      	str	r3, [r7, #16]
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003066:	b672      	cpsid	i
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	b662      	cpsie	i
 8003076:	60fb      	str	r3, [r7, #12]
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	e7fd      	b.n	800307a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800307e:	f000 fe7d 	bl	8003d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <xTaskCheckForTimeOut+0xc8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d102      	bne.n	80030a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	e023      	b.n	80030ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <xTaskCheckForTimeOut+0xcc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d007      	beq.n	80030be <xTaskCheckForTimeOut+0x8e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e015      	b.n	80030ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d20b      	bcs.n	80030e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad2      	subs	r2, r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff95 	bl	8003004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e004      	b.n	80030ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030ea:	f000 fe7d 	bl	8003de8 <vPortExitCritical>

	return xReturn;
 80030ee:	69fb      	ldr	r3, [r7, #28]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000c0c 	.word	0x20000c0c
 80030fc:	20000c20 	.word	0x20000c20

08003100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003104:	4b03      	ldr	r3, [pc, #12]	@ (8003114 <vTaskMissedYield+0x14>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20000c1c 	.word	0x20000c1c

08003118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003120:	f000 f852 	bl	80031c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <prvIdleTask+0x28>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d9f9      	bls.n	8003120 <prvIdleTask+0x8>
			{
				taskYIELD();
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <prvIdleTask+0x2c>)
 800312e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800313c:	e7f0      	b.n	8003120 <prvIdleTask+0x8>
 800313e:	bf00      	nop
 8003140:	20000738 	.word	0x20000738
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	e00c      	b.n	800316e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <prvInitialiseTaskLists+0x60>)
 8003160:	4413      	add	r3, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fc98 	bl	8001a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3301      	adds	r3, #1
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b37      	cmp	r3, #55	@ 0x37
 8003172:	d9ef      	bls.n	8003154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003174:	480d      	ldr	r0, [pc, #52]	@ (80031ac <prvInitialiseTaskLists+0x64>)
 8003176:	f7fe fc8f 	bl	8001a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800317a:	480d      	ldr	r0, [pc, #52]	@ (80031b0 <prvInitialiseTaskLists+0x68>)
 800317c:	f7fe fc8c 	bl	8001a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003180:	480c      	ldr	r0, [pc, #48]	@ (80031b4 <prvInitialiseTaskLists+0x6c>)
 8003182:	f7fe fc89 	bl	8001a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003186:	480c      	ldr	r0, [pc, #48]	@ (80031b8 <prvInitialiseTaskLists+0x70>)
 8003188:	f7fe fc86 	bl	8001a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800318c:	480b      	ldr	r0, [pc, #44]	@ (80031bc <prvInitialiseTaskLists+0x74>)
 800318e:	f7fe fc83 	bl	8001a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003192:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <prvInitialiseTaskLists+0x78>)
 8003194:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <prvInitialiseTaskLists+0x64>)
 8003196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <prvInitialiseTaskLists+0x7c>)
 800319a:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <prvInitialiseTaskLists+0x68>)
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000738 	.word	0x20000738
 80031ac:	20000b98 	.word	0x20000b98
 80031b0:	20000bac 	.word	0x20000bac
 80031b4:	20000bc8 	.word	0x20000bc8
 80031b8:	20000bdc 	.word	0x20000bdc
 80031bc:	20000bf4 	.word	0x20000bf4
 80031c0:	20000bc0 	.word	0x20000bc0
 80031c4:	20000bc4 	.word	0x20000bc4

080031c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ce:	e019      	b.n	8003204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031d0:	f000 fdd4 	bl	8003d7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <prvCheckTasksWaitingTermination+0x50>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fce3 	bl	8001bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <prvCheckTasksWaitingTermination+0x54>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	4a0b      	ldr	r2, [pc, #44]	@ (800321c <prvCheckTasksWaitingTermination+0x54>)
 80031ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <prvCheckTasksWaitingTermination+0x58>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <prvCheckTasksWaitingTermination+0x58>)
 80031f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031fa:	f000 fdf5 	bl	8003de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f810 	bl	8003224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <prvCheckTasksWaitingTermination+0x58>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e1      	bne.n	80031d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000bdc 	.word	0x20000bdc
 800321c:	20000c08 	.word	0x20000c08
 8003220:	20000bf0 	.word	0x20000bf0

08003224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	4618      	mov	r0, r3
 800323c:	f000 ff9a 	bl	8004174 <vPortFree>
				vPortFree( pxTCB );
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 ff97 	bl	8004174 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003246:	e01b      	b.n	8003280 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800324e:	2b01      	cmp	r3, #1
 8003250:	d103      	bne.n	800325a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 ff8e 	bl	8004174 <vPortFree>
	}
 8003258:	e012      	b.n	8003280 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003260:	2b02      	cmp	r3, #2
 8003262:	d00d      	beq.n	8003280 <prvDeleteTCB+0x5c>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	b672      	cpsid	i
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	b662      	cpsie	i
 8003278:	60fb      	str	r3, [r7, #12]
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <prvDeleteTCB+0x58>
	}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <prvResetNextTaskUnblockTime+0x38>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <prvResetNextTaskUnblockTime+0x3c>)
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a0:	e008      	b.n	80032b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <prvResetNextTaskUnblockTime+0x38>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <prvResetNextTaskUnblockTime+0x3c>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	20000bc0 	.word	0x20000bc0
 80032c4:	20000c28 	.word	0x20000c28

080032c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <xTaskGetSchedulerState+0x34>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032d6:	2301      	movs	r3, #1
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	e008      	b.n	80032ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <xTaskGetSchedulerState+0x38>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032e4:	2302      	movs	r3, #2
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	e001      	b.n	80032ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032ee:	687b      	ldr	r3, [r7, #4]
	}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000c14 	.word	0x20000c14
 8003300:	20000c30 	.word	0x20000c30

08003304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d05c      	beq.n	80033d4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800331a:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <xTaskPriorityDisinherit+0xdc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d00d      	beq.n	8003340 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	b672      	cpsid	i
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	b662      	cpsie	i
 8003338:	60fb      	str	r3, [r7, #12]
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	b672      	cpsid	i
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	b662      	cpsie	i
 800335c:	60bb      	str	r3, [r7, #8]
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	429a      	cmp	r2, r3
 8003378:	d02c      	beq.n	80033d4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	2b00      	cmp	r3, #0
 8003380:	d128      	bne.n	80033d4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fc10 	bl	8001bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <xTaskPriorityDisinherit+0xe0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d903      	bls.n	80033b4 <xTaskPriorityDisinherit+0xb0>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a0c      	ldr	r2, [pc, #48]	@ (80033e4 <xTaskPriorityDisinherit+0xe0>)
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <xTaskPriorityDisinherit+0xe4>)
 80033c2:	441a      	add	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fe fb91 	bl	8001af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033d4:	697b      	ldr	r3, [r7, #20]
	}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000734 	.word	0x20000734
 80033e4:	20000c10 	.word	0x20000c10
 80033e8:	20000738 	.word	0x20000738

080033ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <prvAddCurrentTaskToDelayedList+0x90>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033fc:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x94>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fbd2 	bl	8001bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d10a      	bne.n	8003426 <prvAddCurrentTaskToDelayedList+0x3a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003416:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x94>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4819      	ldr	r0, [pc, #100]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x98>)
 8003420:	f7fe fb67 	bl	8001af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003424:	e026      	b.n	8003474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800342e:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x94>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	429a      	cmp	r2, r3
 800343c:	d209      	bcs.n	8003452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800343e:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x94>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f7fe fb75 	bl	8001b3a <vListInsert>
}
 8003450:	e010      	b.n	8003474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003452:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x94>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7fe fb6b 	bl	8001b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d202      	bcs.n	8003474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000c0c 	.word	0x20000c0c
 8003480:	20000734 	.word	0x20000734
 8003484:	20000bf4 	.word	0x20000bf4
 8003488:	20000bc4 	.word	0x20000bc4
 800348c:	20000bc0 	.word	0x20000bc0
 8003490:	20000c28 	.word	0x20000c28

08003494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800349e:	f000 fb21 	bl	8003ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034a2:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <xTimerCreateTimerTask+0x88>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80034b2:	1d3a      	adds	r2, r7, #4
 80034b4:	f107 0108 	add.w	r1, r7, #8
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fad1 	bl	8001a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	9202      	str	r2, [sp, #8]
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	460a      	mov	r2, r1
 80034d4:	4912      	ldr	r1, [pc, #72]	@ (8003520 <xTimerCreateTimerTask+0x8c>)
 80034d6:	4813      	ldr	r0, [pc, #76]	@ (8003524 <xTimerCreateTimerTask+0x90>)
 80034d8:	f7ff f8ac 	bl	8002634 <xTaskCreateStatic>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a12      	ldr	r2, [pc, #72]	@ (8003528 <xTimerCreateTimerTask+0x94>)
 80034e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034e2:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <xTimerCreateTimerTask+0x94>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10d      	bne.n	8003510 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f8:	b672      	cpsid	i
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	b662      	cpsie	i
 8003508:	613b      	str	r3, [r7, #16]
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003510:	697b      	ldr	r3, [r7, #20]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000c64 	.word	0x20000c64
 8003520:	08004464 	.word	0x08004464
 8003524:	0800366d 	.word	0x0800366d
 8003528:	20000c68 	.word	0x20000c68

0800352c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10d      	bne.n	8003560 <xTimerGenericCommand+0x34>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	b672      	cpsid	i
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	b662      	cpsie	i
 8003558:	623b      	str	r3, [r7, #32]
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <xTimerGenericCommand+0x9c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02a      	beq.n	80035be <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b05      	cmp	r3, #5
 8003578:	dc18      	bgt.n	80035ac <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800357a:	f7ff fea5 	bl	80032c8 <xTaskGetSchedulerState>
 800357e:	4603      	mov	r3, r0
 8003580:	2b02      	cmp	r3, #2
 8003582:	d109      	bne.n	8003598 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003584:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <xTimerGenericCommand+0x9c>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	f107 0110 	add.w	r1, r7, #16
 800358c:	2300      	movs	r3, #0
 800358e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003590:	f7fe fc4c 	bl	8001e2c <xQueueGenericSend>
 8003594:	6278      	str	r0, [r7, #36]	@ 0x24
 8003596:	e012      	b.n	80035be <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <xTimerGenericCommand+0x9c>)
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	f107 0110 	add.w	r1, r7, #16
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	f7fe fc42 	bl	8001e2c <xQueueGenericSend>
 80035a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80035aa:	e008      	b.n	80035be <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <xTimerGenericCommand+0x9c>)
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	f107 0110 	add.w	r1, r7, #16
 80035b4:	2300      	movs	r3, #0
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	f7fe fd42 	bl	8002040 <xQueueGenericSendFromISR>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	@ 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000c64 	.word	0x20000c64

080035cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <prvProcessExpiredTimer+0x9c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fae1 	bl	8001bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d025      	beq.n	8003644 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	18d1      	adds	r1, r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	6978      	ldr	r0, [r7, #20]
 8003606:	f000 f8d7 	bl	80037b8 <prvInsertTimerInActiveList>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d022      	beq.n	8003656 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	2100      	movs	r1, #0
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ff86 	bl	800352c <xTimerGenericCommand>
 8003620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	b672      	cpsid	i
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	b662      	cpsie	i
 800363c:	60fb      	str	r3, [r7, #12]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	4798      	blx	r3
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000c5c 	.word	0x20000c5c

0800366c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f859 	bl	8003730 <prvGetNextExpireTime>
 800367e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4619      	mov	r1, r3
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f805 	bl	8003694 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800368a:	f000 f8d7 	bl	800383c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800368e:	bf00      	nop
 8003690:	e7f0      	b.n	8003674 <prvTimerTask+0x8>
	...

08003694 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800369e:	f7ff fa1b 	bl	8002ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f866 	bl	8003778 <prvSampleTimeNow>
 80036ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d130      	bne.n	8003716 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <prvProcessTimerOrBlockTask+0x3c>
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d806      	bhi.n	80036d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80036c2:	f7ff fa17 	bl	8002af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff7f 	bl	80035cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80036ce:	e024      	b.n	800371a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036d6:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <prvProcessTimerOrBlockTask+0x90>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <prvProcessTimerOrBlockTask+0x50>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <prvProcessTimerOrBlockTask+0x52>
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003728 <prvProcessTimerOrBlockTask+0x94>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fe ff69 	bl	80025cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036fa:	f7ff f9fb 	bl	8002af4 <xTaskResumeAll>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <prvProcessTimerOrBlockTask+0x98>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
}
 8003714:	e001      	b.n	800371a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003716:	f7ff f9ed 	bl	8002af4 <xTaskResumeAll>
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000c60 	.word	0x20000c60
 8003728:	20000c64 	.word	0x20000c64
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <prvGetNextExpireTime+0x44>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <prvGetNextExpireTime+0x16>
 8003742:	2201      	movs	r2, #1
 8003744:	e000      	b.n	8003748 <prvGetNextExpireTime+0x18>
 8003746:	2200      	movs	r2, #0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003754:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <prvGetNextExpireTime+0x44>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e001      	b.n	8003764 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000c5c 	.word	0x20000c5c

08003778 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003780:	f7ff fa58 	bl	8002c34 <xTaskGetTickCount>
 8003784:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003786:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <prvSampleTimeNow+0x3c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d205      	bcs.n	800379c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003790:	f000 f940 	bl	8003a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e002      	b.n	80037a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037a2:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <prvSampleTimeNow+0x3c>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000c6c 	.word	0x20000c6c

080037b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d812      	bhi.n	8003804 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e01b      	b.n	800382a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <prvInsertTimerInActiveList+0x7c>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7fe f99c 	bl	8001b3a <vListInsert>
 8003802:	e012      	b.n	800382a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d206      	bcs.n	800381a <prvInsertTimerInActiveList+0x62>
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e007      	b.n	800382a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800381a:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <prvInsertTimerInActiveList+0x80>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe f988 	bl	8001b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000c60 	.word	0x20000c60
 8003838:	20000c5c 	.word	0x20000c5c

0800383c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	@ 0x38
 8003840:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003842:	e0d4      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	da1b      	bge.n	8003882 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	3304      	adds	r3, #4
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	b672      	cpsid	i
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	b662      	cpsie	i
 800386a:	61fb      	str	r3, [r7, #28]
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003878:	6850      	ldr	r0, [r2, #4]
 800387a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387c:	6892      	ldr	r2, [r2, #8]
 800387e:	4611      	mov	r1, r2
 8003880:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f2c0 80b2 	blt.w	80039ee <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	3304      	adds	r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe f986 	bl	8001bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038a0:	463b      	mov	r3, r7
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff68 	bl	8003778 <prvSampleTimeNow>
 80038a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	f200 809b 	bhi.w	80039e8 <prvProcessReceivedCommands+0x1ac>
 80038b2:	a201      	add	r2, pc, #4	@ (adr r2, 80038b8 <prvProcessReceivedCommands+0x7c>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e1 	.word	0x080038e1
 80038c4:	0800395b 	.word	0x0800395b
 80038c8:	0800396f 	.word	0x0800396f
 80038cc:	080039bf 	.word	0x080039bf
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e1 	.word	0x080038e1
 80038d8:	0800395b 	.word	0x0800395b
 80038dc:	0800396f 	.word	0x0800396f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	18d1      	adds	r1, r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003900:	f7ff ff5a 	bl	80037b8 <prvInsertTimerInActiveList>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d070      	beq.n	80039ec <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003910:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d065      	beq.n	80039ec <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	441a      	add	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	2100      	movs	r1, #0
 8003930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003932:	f7ff fdfb 	bl	800352c <xTimerGenericCommand>
 8003936:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d156      	bne.n	80039ec <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	b672      	cpsid	i
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	b662      	cpsie	i
 8003952:	61bb      	str	r3, [r7, #24]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800396c:	e03f      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	b672      	cpsid	i
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	b662      	cpsie	i
 80039a2:	617b      	str	r3, [r7, #20]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	18d1      	adds	r1, r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b8:	f7ff fefe 	bl	80037b8 <prvInsertTimerInActiveList>
					break;
 80039bc:	e017      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80039cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ce:	f000 fbd1 	bl	8004174 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039d2:	e00c      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80039e6:	e002      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <prvProcessReceivedCommands+0x1b2>
					break;
 80039ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <prvProcessReceivedCommands+0x1d4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	1d39      	adds	r1, r7, #4
 80039f4:	2200      	movs	r2, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fbc6 	bl	8002188 <xQueueReceive>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f47f af20 	bne.w	8003844 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3730      	adds	r7, #48	@ 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000c64 	.word	0x20000c64

08003a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a1a:	e04b      	b.n	8003ab4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a26:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe f8b9 	bl	8001bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d031      	beq.n	8003ab4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d90e      	bls.n	8003a80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7fe f85e 	bl	8001b3a <vListInsert>
 8003a7e:	e019      	b.n	8003ab4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	2100      	movs	r1, #0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff fd4e 	bl	800352c <xTimerGenericCommand>
 8003a90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	b672      	cpsid	i
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	b662      	cpsie	i
 8003aac:	603b      	str	r3, [r7, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ae      	bne.n	8003a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <prvSwitchTimerLists+0xcc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <prvSwitchTimerLists+0xc8>)
 8003aca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <prvSwitchTimerLists+0xcc>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000c5c 	.word	0x20000c5c
 8003ae0:	20000c60 	.word	0x20000c60

08003ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003aea:	f000 f947 	bl	8003d7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <prvCheckForValidListAndQueue+0x60>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d120      	bne.n	8003b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003af6:	4814      	ldr	r0, [pc, #80]	@ (8003b48 <prvCheckForValidListAndQueue+0x64>)
 8003af8:	f7fd ffce 	bl	8001a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003afc:	4813      	ldr	r0, [pc, #76]	@ (8003b4c <prvCheckForValidListAndQueue+0x68>)
 8003afe:	f7fd ffcb 	bl	8001a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b02:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <prvCheckForValidListAndQueue+0x6c>)
 8003b04:	4a10      	ldr	r2, [pc, #64]	@ (8003b48 <prvCheckForValidListAndQueue+0x64>)
 8003b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <prvCheckForValidListAndQueue+0x70>)
 8003b0a:	4a10      	ldr	r2, [pc, #64]	@ (8003b4c <prvCheckForValidListAndQueue+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <prvCheckForValidListAndQueue+0x74>)
 8003b14:	4a11      	ldr	r2, [pc, #68]	@ (8003b5c <prvCheckForValidListAndQueue+0x78>)
 8003b16:	2110      	movs	r1, #16
 8003b18:	200a      	movs	r0, #10
 8003b1a:	f7fe f8dd 	bl	8001cd8 <xQueueGenericCreateStatic>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <prvCheckForValidListAndQueue+0x60>)
 8003b22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <prvCheckForValidListAndQueue+0x60>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <prvCheckForValidListAndQueue+0x60>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	490b      	ldr	r1, [pc, #44]	@ (8003b60 <prvCheckForValidListAndQueue+0x7c>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fd20 	bl	8002578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b38:	f000 f956 	bl	8003de8 <vPortExitCritical>
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000c64 	.word	0x20000c64
 8003b48:	20000c34 	.word	0x20000c34
 8003b4c:	20000c48 	.word	0x20000c48
 8003b50:	20000c5c 	.word	0x20000c5c
 8003b54:	20000c60 	.word	0x20000c60
 8003b58:	20000d10 	.word	0x20000d10
 8003b5c:	20000c70 	.word	0x20000c70
 8003b60:	0800446c 	.word	0x0800446c

08003b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b04      	subs	r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b04      	subs	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b04      	subs	r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b94:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc8 <pxPortInitialiseStack+0x64>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b14      	subs	r3, #20
 8003b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b04      	subs	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f06f 0202 	mvn.w	r2, #2
 8003bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b20      	subs	r3, #32
 8003bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bba:	68fb      	ldr	r3, [r7, #12]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	08003bcd 	.word	0x08003bcd

08003bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <prvTaskExitError+0x60>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d00d      	beq.n	8003bfc <prvTaskExitError+0x30>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	b672      	cpsid	i
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	b662      	cpsie	i
 8003bf4:	60fb      	str	r3, [r7, #12]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <prvTaskExitError+0x2c>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c00:	b672      	cpsid	i
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	b662      	cpsie	i
 8003c10:	60bb      	str	r3, [r7, #8]
}
 8003c12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c14:	bf00      	nop
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0fc      	beq.n	8003c16 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <pxCurrentTCBConst2>)
 8003c32:	6819      	ldr	r1, [r3, #0]
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	f380 8809 	msr	PSP, r0
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f380 8811 	msr	BASEPRI, r0
 8003c4a:	4770      	bx	lr
 8003c4c:	f3af 8000 	nop.w

08003c50 <pxCurrentTCBConst2>:
 8003c50:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop

08003c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c58:	4808      	ldr	r0, [pc, #32]	@ (8003c7c <prvPortStartFirstTask+0x24>)
 8003c5a:	6800      	ldr	r0, [r0, #0]
 8003c5c:	6800      	ldr	r0, [r0, #0]
 8003c5e:	f380 8808 	msr	MSP, r0
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f380 8814 	msr	CONTROL, r0
 8003c6a:	b662      	cpsie	i
 8003c6c:	b661      	cpsie	f
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	df00      	svc	0
 8003c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c7a:	bf00      	nop
 8003c7c:	e000ed08 	.word	0xe000ed08

08003c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c86:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <xPortStartScheduler+0xe4>)
 8003c88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	22ff      	movs	r2, #255	@ 0xff
 8003c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4b2f      	ldr	r3, [pc, #188]	@ (8003d68 <xPortStartScheduler+0xe8>)
 8003cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cae:	4b2f      	ldr	r3, [pc, #188]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cb4:	e009      	b.n	8003cca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d0ef      	beq.n	8003cb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cd6:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1c3 0307 	rsb	r3, r3, #7
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00d      	beq.n	8003cfe <xPortStartScheduler+0x7e>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	b672      	cpsid	i
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	b662      	cpsie	i
 8003cf6:	60bb      	str	r3, [r7, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4a19      	ldr	r2, [pc, #100]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d08:	4b18      	ldr	r3, [pc, #96]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d10:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <xPortStartScheduler+0xec>)
 8003d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <xPortStartScheduler+0xf0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a13      	ldr	r2, [pc, #76]	@ (8003d70 <xPortStartScheduler+0xf0>)
 8003d22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d28:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <xPortStartScheduler+0xf0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a10      	ldr	r2, [pc, #64]	@ (8003d70 <xPortStartScheduler+0xf0>)
 8003d2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d34:	f000 f8dc 	bl	8003ef0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d38:	4b0e      	ldr	r3, [pc, #56]	@ (8003d74 <xPortStartScheduler+0xf4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d3e:	f000 f8fb 	bl	8003f38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <xPortStartScheduler+0xf8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	@ (8003d78 <xPortStartScheduler+0xf8>)
 8003d48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d4e:	f7ff ff83 	bl	8003c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d52:	f7ff f83b 	bl	8002dcc <vTaskSwitchContext>
	prvTaskExitError();
 8003d56:	f7ff ff39 	bl	8003bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e000e400 	.word	0xe000e400
 8003d68:	20000d60 	.word	0x20000d60
 8003d6c:	20000d64 	.word	0x20000d64
 8003d70:	e000ed20 	.word	0xe000ed20
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	e000ef34 	.word	0xe000ef34

08003d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	b672      	cpsid	i
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	b662      	cpsie	i
 8003d96:	607b      	str	r3, [r7, #4]
}
 8003d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <vPortEnterCritical+0x64>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a0f      	ldr	r2, [pc, #60]	@ (8003de0 <vPortEnterCritical+0x64>)
 8003da2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <vPortEnterCritical+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d112      	bne.n	8003dd2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dac:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <vPortEnterCritical+0x68>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <vPortEnterCritical+0x56>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	b672      	cpsid	i
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	b662      	cpsie	i
 8003dca:	603b      	str	r3, [r7, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <vPortEnterCritical+0x52>
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000000c 	.word	0x2000000c
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dee:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <vPortExitCritical+0x54>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <vPortExitCritical+0x2a>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	b672      	cpsid	i
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	b662      	cpsie	i
 8003e0a:	607b      	str	r3, [r7, #4]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <vPortExitCritical+0x54>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	4a08      	ldr	r2, [pc, #32]	@ (8003e3c <vPortExitCritical+0x54>)
 8003e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e1c:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <vPortExitCritical+0x54>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <vPortExitCritical+0x48>
 8003e24:	2300      	movs	r3, #0
 8003e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f383 8811 	msr	BASEPRI, r3
}
 8003e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	2000000c 	.word	0x2000000c

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f01e 0f10 	tst.w	lr, #16
 8003e50:	bf08      	it	eq
 8003e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e64:	b672      	cpsid	i
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	b662      	cpsie	i
 8003e74:	f7fe ffaa 	bl	8002dcc <vTaskSwitchContext>
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	f380 8811 	msr	BASEPRI, r0
 8003e80:	bc09      	pop	{r0, r3}
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8a:	f01e 0f10 	tst.w	lr, #16
 8003e8e:	bf08      	it	eq
 8003e90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e94:	f380 8809 	msr	PSP, r0
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <pxCurrentTCBConst>:
 8003ea0:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	b672      	cpsid	i
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	b662      	cpsie	i
 8003ec2:	607b      	str	r3, [r7, #4]
}
 8003ec4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ec6:	f7fe fec5 	bl	8002c54 <xTaskIncrementTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <xPortSysTickHandler+0x44>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f383 8811 	msr	BASEPRI, r3
}
 8003ee2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <vPortSetupTimerInterrupt+0x34>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <vPortSetupTimerInterrupt+0x38>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f00:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <vPortSetupTimerInterrupt+0x3c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <vPortSetupTimerInterrupt+0x40>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	4a09      	ldr	r2, [pc, #36]	@ (8003f34 <vPortSetupTimerInterrupt+0x44>)
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f12:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <vPortSetupTimerInterrupt+0x34>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000e010 	.word	0xe000e010
 8003f28:	e000e018 	.word	0xe000e018
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	10624dd3 	.word	0x10624dd3
 8003f34:	e000e014 	.word	0xe000e014

08003f38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f48 <vPortEnableVFP+0x10>
 8003f3c:	6801      	ldr	r1, [r0, #0]
 8003f3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f42:	6001      	str	r1, [r0, #0]
 8003f44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f46:	bf00      	nop
 8003f48:	e000ed88 	.word	0xe000ed88

08003f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f52:	f3ef 8305 	mrs	r3, IPSR
 8003f56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d917      	bls.n	8003f8e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <vPortValidateInterruptPriority+0x7c>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f68:	4b18      	ldr	r3, [pc, #96]	@ (8003fcc <vPortValidateInterruptPriority+0x80>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	7afa      	ldrb	r2, [r7, #11]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20d      	bcs.n	8003f8e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	b672      	cpsid	i
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	b662      	cpsie	i
 8003f86:	607b      	str	r3, [r7, #4]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <vPortValidateInterruptPriority+0x84>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <vPortValidateInterruptPriority+0x88>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90d      	bls.n	8003fba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	b672      	cpsid	i
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	b662      	cpsie	i
 8003fb2:	603b      	str	r3, [r7, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <vPortValidateInterruptPriority+0x6a>
	}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	e000e3f0 	.word	0xe000e3f0
 8003fcc:	20000d60 	.word	0x20000d60
 8003fd0:	e000ed0c 	.word	0xe000ed0c
 8003fd4:	20000d64 	.word	0x20000d64

08003fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003fe4:	f7fe fd78 	bl	8002ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8004160 <pvPortMalloc+0x188>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ff0:	f000 f920 	bl	8004234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <pvPortMalloc+0x18c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 8094 	bne.w	800412a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8004008:	2208      	movs	r2, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f023 0307 	bic.w	r3, r3, #7
 8004020:	3308      	adds	r3, #8
 8004022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <pvPortMalloc+0x72>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	617b      	str	r3, [r7, #20]
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	e7fd      	b.n	8004046 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d06c      	beq.n	800412a <pvPortMalloc+0x152>
 8004050:	4b45      	ldr	r3, [pc, #276]	@ (8004168 <pvPortMalloc+0x190>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d867      	bhi.n	800412a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800405a:	4b44      	ldr	r3, [pc, #272]	@ (800416c <pvPortMalloc+0x194>)
 800405c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800405e:	4b43      	ldr	r3, [pc, #268]	@ (800416c <pvPortMalloc+0x194>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004064:	e004      	b.n	8004070 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d903      	bls.n	8004082 <pvPortMalloc+0xaa>
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f1      	bne.n	8004066 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <pvPortMalloc+0x188>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004088:	429a      	cmp	r2, r3
 800408a:	d04e      	beq.n	800412a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2208      	movs	r2, #8
 8004092:	4413      	add	r3, r2
 8004094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad2      	subs	r2, r2, r3
 80040a6:	2308      	movs	r3, #8
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d922      	bls.n	80040f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <pvPortMalloc+0x104>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	b672      	cpsid	i
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	b662      	cpsie	i
 80040d4:	613b      	str	r3, [r7, #16]
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040ee:	69b8      	ldr	r0, [r7, #24]
 80040f0:	f000 f902 	bl	80042f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <pvPortMalloc+0x190>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <pvPortMalloc+0x190>)
 8004100:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004102:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <pvPortMalloc+0x190>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <pvPortMalloc+0x198>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d203      	bcs.n	8004116 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800410e:	4b16      	ldr	r3, [pc, #88]	@ (8004168 <pvPortMalloc+0x190>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <pvPortMalloc+0x198>)
 8004114:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <pvPortMalloc+0x18c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	431a      	orrs	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800412a:	f7fe fce3 	bl	8002af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <pvPortMalloc+0x17c>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	b672      	cpsid	i
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	b662      	cpsie	i
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <pvPortMalloc+0x178>
	return pvReturn;
 8004154:	69fb      	ldr	r3, [r7, #28]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	@ 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20004970 	.word	0x20004970
 8004164:	2000497c 	.word	0x2000497c
 8004168:	20004974 	.word	0x20004974
 800416c:	20004968 	.word	0x20004968
 8004170:	20004978 	.word	0x20004978

08004174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04e      	beq.n	8004224 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004186:	2308      	movs	r3, #8
 8004188:	425b      	negs	r3, r3
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4b24      	ldr	r3, [pc, #144]	@ (800422c <vPortFree+0xb8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <vPortFree+0x4a>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a6:	b672      	cpsid	i
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	b662      	cpsie	i
 80041b6:	60fb      	str	r3, [r7, #12]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <vPortFree+0x6e>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	b672      	cpsid	i
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	b662      	cpsie	i
 80041da:	60bb      	str	r3, [r7, #8]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <vPortFree+0xb8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d115      	bne.n	8004224 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <vPortFree+0xb8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004208:	f7fe fc66 	bl	8002ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <vPortFree+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4413      	add	r3, r2
 8004216:	4a06      	ldr	r2, [pc, #24]	@ (8004230 <vPortFree+0xbc>)
 8004218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800421a:	6938      	ldr	r0, [r7, #16]
 800421c:	f000 f86c 	bl	80042f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004220:	f7fe fc68 	bl	8002af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	2000497c 	.word	0x2000497c
 8004230:	20004974 	.word	0x20004974

08004234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800423a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800423e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <prvHeapInit+0xac>)
 8004242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3307      	adds	r3, #7
 8004252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <prvHeapInit+0xac>)
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800426c:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <prvHeapInit+0xb0>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004272:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <prvHeapInit+0xb0>)
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4413      	add	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004280:	2208      	movs	r2, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <prvHeapInit+0xb4>)
 8004294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <prvHeapInit+0xb4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <prvHeapInit+0xb4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <prvHeapInit+0xb4>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <prvHeapInit+0xb8>)
 80042c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a09      	ldr	r2, [pc, #36]	@ (80042f0 <prvHeapInit+0xbc>)
 80042ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <prvHeapInit+0xc0>)
 80042ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000d68 	.word	0x20000d68
 80042e4:	20004968 	.word	0x20004968
 80042e8:	20004970 	.word	0x20004970
 80042ec:	20004978 	.word	0x20004978
 80042f0:	20004974 	.word	0x20004974
 80042f4:	2000497c 	.word	0x2000497c

080042f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004300:	4b28      	ldr	r3, [pc, #160]	@ (80043a4 <prvInsertBlockIntoFreeList+0xac>)
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	e002      	b.n	800430c <prvInsertBlockIntoFreeList+0x14>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d8f7      	bhi.n	8004306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d108      	bne.n	800433a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	441a      	add	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d118      	bne.n	8004380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b15      	ldr	r3, [pc, #84]	@ (80043a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d00d      	beq.n	8004376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e008      	b.n	8004388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004376:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e003      	b.n	8004388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d002      	beq.n	8004396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20004968 	.word	0x20004968
 80043a8:	20004970 	.word	0x20004970

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4d0d      	ldr	r5, [pc, #52]	@ (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	@ (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2600      	movs	r6, #0
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4d0b      	ldr	r5, [pc, #44]	@ (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004400 <__libc_init_array+0x44>)
 80043d0:	f000 f826 	bl	8004420 <_init>
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2600      	movs	r6, #0
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	080044b0 	.word	0x080044b0
 80043f8:	080044b0 	.word	0x080044b0
 80043fc:	080044b0 	.word	0x080044b0
 8004400:	080044b4 	.word	0x080044b4

08004404 <memcpy>:
 8004404:	440a      	add	r2, r1
 8004406:	4291      	cmp	r1, r2
 8004408:	f100 33ff 	add.w	r3, r0, #4294967295
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	4770      	bx	lr
 8004410:	b510      	push	{r4, lr}
 8004412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441a:	4291      	cmp	r1, r2
 800441c:	d1f9      	bne.n	8004412 <memcpy+0xe>
 800441e:	bd10      	pop	{r4, pc}

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
